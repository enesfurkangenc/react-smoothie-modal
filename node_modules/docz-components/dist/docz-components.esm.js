import { useThemeUI, jsx } from 'theme-ui';
import { useState } from 'react';
import { LiveProvider, LivePreview, LiveError, LiveEditor } from 'react-live';
import { merge, get, defaultTo } from 'lodash-es';
import { Resizable } from 're-resizable';
import copy from 'copy-text-to-clipboard';
import moraga from 'typography-theme-moraga';
import { toTheme } from '@theme-ui/typography';
import get$1 from 'lodash-es/get';
import 'react-feather/dist/icons/chevron-down';
import 'react-feather/dist/icons/chevron-up';
import Icons from 'react-feather/dist/icons/clipboard';
import Icons$1 from 'react-feather/dist/icons/code';
import 'react-feather/dist/icons/edit-2';
import 'react-feather/dist/icons/github';
import 'react-feather/dist/icons/menu';
import 'react-feather/dist/icons/search';
import 'react-feather/dist/icons/sun';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var white = '#FFFFFF';
var grayUltraLight = '#FCFBFA';
var grayExtraLight = '#F5F6F7';
var grayLight = '#CED4DE';
var gray = '#7D899C';
var grayDark = '#2D3747';
var grayExtraDark = '#1D2330';
var dark = '#13161F';
var blueLight = '#e9f2fa';
var blue = '#0B5FFF';
var skyBlue = '#1FB6FF';
var negative = '#EB4D4B';

var colors = ({
  white: white,
  grayUltraLight: grayUltraLight,
  grayExtraLight: grayExtraLight,
  grayLight: grayLight,
  gray: gray,
  grayDark: grayDark,
  grayExtraDark: grayExtraDark,
  dark: dark,
  blueLight: blueLight,
  blue: blue,
  skyBlue: skyBlue,
  negative: negative
});

var dark$1 = {
  plain: {
    color: '#d6deeb',
    backgroundColor: '#13161F'
  },
  styles: [{
    types: ['changed'],
    style: {
      color: 'rgb(162, 191, 252)',
      fontStyle: 'italic'
    }
  }, {
    types: ['deleted'],
    style: {
      color: 'rgba(239, 83, 80, 0.56)',
      fontStyle: 'italic'
    }
  }, {
    types: ['inserted', 'attr-name'],
    style: {
      color: 'rgb(173, 219, 103)',
      fontStyle: 'italic'
    }
  }, {
    types: ['comment'],
    style: {
      color: 'rgb(99, 119, 119)',
      fontStyle: 'italic'
    }
  }, {
    types: ['string', 'url'],
    style: {
      color: 'rgb(173, 219, 103)'
    }
  }, {
    types: ['variable'],
    style: {
      color: 'rgb(214, 222, 235)'
    }
  }, {
    types: ['number'],
    style: {
      color: 'rgb(247, 140, 108)'
    }
  }, {
    types: ['builtin', 'char', 'constant', 'function'],
    style: {
      color: 'rgb(130, 170, 255)'
    }
  }, {
    // This was manually added after the auto-generation
    // so that punctuations are not italicised
    types: ['punctuation'],
    style: {
      color: 'rgb(199, 146, 234)'
    }
  }, {
    types: ['selector', 'doctype'],
    style: {
      color: 'rgb(199, 146, 234)',
      fontStyle: 'italic'
    }
  }, {
    types: ['class-name'],
    style: {
      color: 'rgb(255, 203, 139)'
    }
  }, {
    types: ['tag', 'operator', 'keyword'],
    style: {
      color: 'rgb(127, 219, 202)'
    }
  }, {
    types: ['boolean'],
    style: {
      color: 'rgb(255, 88, 116)'
    }
  }, {
    types: ['property'],
    style: {
      color: 'rgb(128, 203, 196)'
    }
  }, {
    types: ['namespace'],
    style: {
      color: 'rgb(178, 204, 214)'
    }
  }]
};

var light = {
  plain: {
    color: '#393A34',
    backgroundColor: '#f6f8fa'
  },
  styles: [{
    types: ['comment', 'prolog', 'doctype', 'cdata'],
    style: {
      color: '#999988',
      fontStyle: 'italic'
    }
  }, {
    types: ['namespace'],
    style: {
      opacity: 0.7
    }
  }, {
    types: ['string', 'attr-value'],
    style: {
      color: '#e3116c'
    }
  }, {
    types: ['punctuation', 'operator'],
    style: {
      color: '#393A34'
    }
  }, {
    types: ['entity', 'url', 'symbol', 'number', 'boolean', 'variable', 'constant', 'property', 'regex', 'inserted'],
    style: {
      color: '#36acaa'
    }
  }, {
    types: ['atrule', 'keyword', 'attr-name', 'selector'],
    style: {
      color: '#00a4db'
    }
  }, {
    types: ['function', 'deleted', 'tag'],
    style: {
      color: '#d73a49'
    }
  }, {
    types: ['function-variable'],
    style: {
      color: '#6f42c1'
    }
  }, {
    types: ['tag', 'selector', 'keyword'],
    style: {
      color: '#00009f'
    }
  }]
};

var light$1 =
/*#__PURE__*/
_extends({}, colors, {
  primary: blue,
  text: grayDark,
  muted: gray,
  link: blue,
  background: white,
  border: grayLight,
  sidebar: {
    bg: white,
    navGroup: grayLight,
    navLink: grayDark,
    navLinkActive: blue,
    tocLink: gray,
    tocLinkActive: grayDark
  },
  header: {
    bg: grayExtraLight,
    text: grayDark,
    border: grayLight,
    button: {
      bg: blue,
      color: white
    }
  },
  props: {
    bg: grayUltraLight,
    text: grayDark,
    highlight: blue,
    defaultValue: gray,
    descriptionText: grayDark,
    descriptionBg: white
  },
  playground: {
    bg: white,
    border: grayLight
  },
  blockquote: {
    bg: grayExtraLight,
    border: grayLight,
    color: gray
  },
  prism:
  /*#__PURE__*/
  _extends({}, light)
});
var dark$2 =
/*#__PURE__*/
_extends({}, colors, {
  primary: skyBlue,
  text: grayExtraLight,
  muted: gray,
  link: skyBlue,
  background: grayExtraDark,
  border: grayDark,
  sidebar: {
    bg: grayExtraDark,
    navGroup: gray,
    navLink: grayLight,
    navLinkActive: skyBlue,
    tocLink: gray,
    tocLinkActive: grayLight
  },
  header: {
    bg: dark,
    text: grayLight,
    border: grayDark,
    button: {
      bg: skyBlue,
      color: white
    }
  },
  props: {
    bg: dark,
    text: gray,
    highlight: skyBlue,
    defaultValue: grayDark,
    descriptionText: gray,
    descriptionBg: grayExtraDark
  },
  playground: {
    bg: dark,
    border: grayDark
  },
  blockquote: {
    bg: grayDark,
    border: gray,
    color: gray
  },
  prism:
  /*#__PURE__*/
  _extends({}, dark$1)
});

var prism = {
  dark: dark$1,
  light: light
};

moraga.headerWeight = 700;
var typography =
/*#__PURE__*/
toTheme(moraga);

var getTheme = function getTheme(theme) {
  var _table;

  return merge(theme, typography, {
    prism: prism,
    initialColorMode: 'light',
    colors: _extends({}, light$1, {
      modes: {
        dark: dark$2
      }
    }),
    fonts: {
      monospace: 'Inconsolata'
    },
    fontSizes: [12, 14, 16, 20, 24, 32, 48, 64],
    fontWeights: {
      body: 400,
      heading: 700,
      bold: 700
    },
    lineHeights: {
      body: 1.5,
      heading: 1.125
    },
    letterSpacings: {
      body: 'normal',
      caps: '0.2em'
    },
    space: [0, 4, 8, 16, 32, 48, 64, 80, 100],
    radii: {
      square: 0,
      radius: 4,
      rounded: 10
    },
    styles: {
      Container: {
        p: 4,
        maxWidth: 1280
      },
      root: {
        fontSize: 3,
        color: 'text',
        bg: 'background'
      },
      a: {
        color: 'primary',
        textDecoration: 'none',
        '&:hover': {
          color: 'secondary',
          textDecoration: 'underline'
        }
      },
      h1: {
        fontSize: 6
      },
      h2: {
        fontSize: 5
      },
      h3: {
        fontSize: 4
      },
      h4: {
        fontSize: 3
      },
      h5: {
        fontSize: 2
      },
      h6: {
        fontSize: 1
      },
      li: {
        marginBottom: 1
      },
      blockquote: {
        my: 4,
        mx: 0,
        py: 3,
        px: 4,
        bg: 'blockquote.bg',
        borderLeft: function borderLeft(t) {
          return "5px solid " + t.colors.blockquote.border;
        },
        color: 'blockquote.color',
        fontStyle: 'italic',
        '> p': {
          m: 0
        }
      },
      code: {
        fontFamily: 'monospace'
      },
      inlineCode: {
        fontFamily: 'monospace'
      },
      pre: {
        my: 4,
        p: 3,
        variant: 'prism',
        textAlign: 'left',
        fontFamily: 'monospace',
        borderRadius: 'radius'
      },
      table: (_table = {
        width: '100%',
        my: 4,
        borderCollapse: 'separate',
        borderSpacing: 0
      }, _table[['th', 'td']] = {
        textAlign: 'left',
        py: '4px',
        pr: '4px',
        pl: 0,
        borderColor: 'muted',
        borderBottomStyle: 'solid'
      }, _table),
      th: {
        verticalAlign: 'bottom',
        borderBottomWidth: '2px'
      },
      td: {
        verticalAlign: 'top',
        borderBottomWidth: '1px'
      },
      hr: {
        border: 0,
        borderBottom: function borderBottom(t) {
          return "1px solid " + t.colors.border;
        }
      }
    }
  });
};

var usePrismTheme = function usePrismTheme() {
  //@ts-ignore
  var _useThemeUI = useThemeUI(),
      theme = _useThemeUI.theme,
      _useThemeUI$colorMode = _useThemeUI.colorMode,
      colorMode = _useThemeUI$colorMode === void 0 ? 'light' : _useThemeUI$colorMode;

  var prismTheme = get(theme, 'prismTheme');
  var themeToUse = defaultTo(prismTheme, get(theme, "prism." + colorMode, get(getTheme(), "prism." + colorMode)));
  return themeToUse;
};

var styles = {
  iframe: function iframe(showingCode, height) {
    if (height === void 0) {
      height = 'auto';
    }

    return {
      height: height,
      display: 'block',
      minHeight: '100%',
      width: 'calc(100% - 2px)',
      border: function border(t) {
        return "1px solid " + get$1(t, 'colors.playground.border', 'none');
      },
      borderRadius: showingCode ? '4px 4px 0 0' : '4px'
    };
  }
};
var LivePreviewWrapper = function LivePreviewWrapper(_ref) {
  var children = _ref.children,
      showingCode = _ref.showingCode;
  return jsx("div", {
    sx: styles.iframe(showingCode)
  }, children);
};

var ghostButton = {
  p: 0,
  outline: 'none',
  background: 'transparent',
  border: 'none',
  ':hover': {
    cursor: 'pointer'
  }
};

var editor = function editor(theme) {
  return {
    p: 2,
    border: function border(t) {
      return "1px solid " + get$1(t, 'colors.border', 'transparent');
    },
    borderRadius: '0 0 4px 4px',
    background: get$1(theme, 'plain.backgroundColor', 'none'),
    borderTop: 0,
    fontFamily: 'monospace',
    fontSize: 18,
    '* > textarea:focus': {
      font: '400 18px Inconsolata',
      lineHeight: '1.5em ',
      outline: 'none'
    }
  };
};
var error = {
  m: 0,
  py: 2,
  px: 3,
  bg: '#FF4757',
  fontSize: 1,
  color: 'white'
};
var previewWrapper = {
  position: 'relative'
};
var preview = {
  m: 0,
  p: '20px',
  bg: 'playground.bg'
};
var buttons = {
  zIndex: 9,
  display: 'flex',
  position: 'absolute',
  bottom: -20,
  right: 4
};
var button =
/*#__PURE__*/
_extends({}, ghostButton, {
  display: 'flex',
  alignItems: 'center',
  py: 1,
  p: 2,
  bg: 'border',
  color: 'muted',
  borderRadius: '0 0 3px 3px',
  '& ~ &': {
    ml: 1
  }
});

/** @jsx jsx */
var Playground = function Playground(_ref) {
  var code = _ref.code,
      scope = _ref.scope,
      _ref$showPlaygroundEd = _ref.showPlaygroundEditor,
      showPlaygroundEditor = _ref$showPlaygroundEd === void 0 ? true : _ref$showPlaygroundEd,
      showLiveError = _ref.showLiveError;
  var theme = usePrismTheme();

  var _useState = useState(function () {
    return showPlaygroundEditor;
  }),
      showingCode = _useState[0],
      setShowingCode = _useState[1];

  var _useState2 = useState(function () {
    return '100%';
  }),
      width = _useState2[0],
      setWidth = _useState2[1];

  var transformCode = function transformCode(codeToTransform) {
    if (codeToTransform.startsWith('()') || codeToTransform.startsWith('class')) return codeToTransform;
    return "<React.Fragment>" + codeToTransform + "</React.Fragment>";
  };

  var toggleCode = function toggleCode() {
    setShowingCode(function (s) {
      return !s;
    });
  };

  var resizableProps = {
    minWidth: 260,
    maxWidth: '100%',
    size: {
      width: width,
      height: 'auto'
    },
    style: {
      margin: '0 auto '
    },
    enable: {
      top: false,
      right: true,
      bottom: false,
      left: false,
      topRight: false,
      bottomRight: false,
      bottomLeft: false,
      topLeft: false
    },
    onResizeStop: function onResizeStop(e, direction, ref) {
      setWidth(ref.style.width);
    }
  };
  return jsx(Resizable, Object.assign({}, resizableProps), jsx(LiveProvider, {
    code: code,
    scope: scope,
    transformCode: transformCode,
    theme: merge(theme, {
      styles: [],
      plain: {
        fontFamily: 'Inconsolata',
        fontSize: 28,
        lineHeight: '1.5em'
      }
    })
  }, jsx("div", {
    sx: previewWrapper
  }, jsx(LivePreviewWrapper, {
    showingCode: showingCode
  }, jsx(LivePreview, {
    sx: preview
  })), jsx("div", {
    sx: buttons
  }, jsx("button", {
    sx: button,
    onClick: function onClick() {
      return copy(code);
    }
  }, jsx(Icons, {
    size: 12
  })), jsx("button", {
    sx: button,
    onClick: toggleCode
  }, jsx(Icons$1, {
    size: 12
  })))), showLiveError && jsx(LiveError, {
    sx: error
  }), showingCode && jsx("div", {
    sx: editor(theme)
  }, jsx(LiveEditor, null))));
};

export { Playground };
//# sourceMappingURL=docz-components.esm.js.map
