'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var flatten = _interopDefault(require('lodash/flatten'));
var nodeToString = _interopDefault(require('hast-util-to-string'));
var format = require('docz-utils/lib/format');
var jsx = require('docz-utils/lib/jsx');
var imports = require('docz-utils/lib/imports');

const isPlayground = name => {
  return name === 'Playground';
};

const addComponentsProps = scopes => async (node, idx) => {
  const name = jsx.componentName(node.value);
  const tagOpen = new RegExp(`^\\<${name}`);

  if (isPlayground(name)) {
    const formatted = await format.format(nodeToString(node));
    const code = formatted.slice(1, Infinity);
    const scope = `{props,${scopes.join(',')}}`;
    const child = jsx.sanitizeCode(jsx.removeTags(code));
    node.value = node.value.replace(tagOpen, `<${name} __position={${idx}} __code={'${child}'} __scope={${scope}}`);
  }
};

var index = (() => tree => {
  const importNodes = tree.children.filter(n => n.type === 'import');
  const scopes = flatten(importNodes.map(imports.getImportsVariables));
  const nodes = tree.children.filter(node => node.type === 'jsx').map(addComponentsProps(scopes));
  return Promise.all(nodes).then(() => tree);
});

module.exports = index;
