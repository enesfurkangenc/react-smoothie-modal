import { Argv as Yargs } from 'yargs';
import { Plugin } from '../lib/Plugin';
import * as paths from '../config/paths';
export declare type Env = 'production' | 'development';
export declare type ThemeConfig = Record<string, any>;
export interface DocgenConfig {
    handlers?: any[];
    resolver?: (ast: any, recast: any) => any;
    propFilter?: (prop: any) => boolean;
    searchPath: string;
}
export interface Menu {
    name: string;
    route?: string;
    href?: string;
    menu?: Menu[];
}
export interface Argv {
    root: string;
    base: string;
    src: string;
    files: string | string[];
    ignore: any[];
    watchIgnore: string;
    public: string;
    dest: string;
    editBranch: string;
    config: string;
    debug: boolean;
    typescript: boolean;
    propsParser: boolean;
    host: string;
    port: number;
    native: boolean;
    notUseSpecifiers: boolean;
    openBrowser: boolean;
    title: string;
    description: string;
    /** slugify separator */
    separator: string;
}
export interface Config extends Argv {
    paths: paths.Paths;
    plugins: Plugin[];
    mdPlugins: any[];
    hastPlugins: any[];
    menu: Menu[];
    themeConfig: ThemeConfig;
    docgenConfig: DocgenConfig;
    filterComponents: (files: string[]) => string[];
}
export declare const setArgs: (yargs: Yargs<{}>) => Yargs<{
    root: any;
} & {
    base: any;
} & {
    source: any;
} & {
    files: any;
} & {
    ignore: any;
} & {
    public: any;
} & {
    dest: any;
} & {
    editBranch: any;
} & {
    config: any;
} & {
    title: any;
} & {
    description: any;
} & {
    typescript: any;
} & {
    propsParser: any;
} & {
    debug: any;
} & {
    host: any;
} & {
    port: any;
} & {
    native: any;
} & {
    separator: any;
} & {
    openBrowser: boolean;
}>;
